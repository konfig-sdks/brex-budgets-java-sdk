/*
 * Budgets API
 *  The budgets API lets you manage your Brex budgets. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Budget;
import com.konfigthis.client.model.BudgetLimit;
import com.konfigthis.client.model.BudgetLimitVisibilityType;
import com.konfigthis.client.model.CreateBudgetRequest;
import com.konfigthis.client.model.LimitType;
import java.time.LocalDate;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.PageBudget;
import com.konfigthis.client.model.PeriodType;
import com.konfigthis.client.model.SpendType;
import com.konfigthis.client.model.UpdateBudgetRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BudgetsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BudgetsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BudgetsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call archiveBudgetByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/budgets/{id}/archive"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveBudgetByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling archiveBudgetById(Async)");
        }

        return archiveBudgetByIdCall(id, _callback);

    }


    private ApiResponse<Void> archiveBudgetByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = archiveBudgetByIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call archiveBudgetByIdAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveBudgetByIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ArchiveBudgetByIdRequestBuilder {
        private final String id;

        private ArchiveBudgetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for archiveBudgetById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> archiveBudget 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return archiveBudgetByIdCall(id, _callback);
        }


        /**
         * Execute archiveBudgetById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> archiveBudget 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            archiveBudgetByIdWithHttpInfo(id);
        }

        /**
         * Execute archiveBudgetById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> archiveBudget 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return archiveBudgetByIdWithHttpInfo(id);
        }

        /**
         * Execute archiveBudgetById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> archiveBudget 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return archiveBudgetByIdAsync(id, _callback);
        }
    }

    /**
     *  Archive a budget 
     *  Archives a budget, making it unusable for future expenses and removing it from the UI 
     * @param id  (required)
     * @return ArchiveBudgetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> archiveBudget 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ArchiveBudgetByIdRequestBuilder archiveBudgetById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ArchiveBudgetByIdRequestBuilder(id);
    }
    private okhttp3.Call createCall(String idempotencyKey, CreateBudgetRequest createBudgetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBudgetRequest;

        // create path and map variables
        String localVarPath = "/v1/budgets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(String idempotencyKey, CreateBudgetRequest createBudgetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling create(Async)");
        }

        // verify the required parameter 'createBudgetRequest' is set
        if (createBudgetRequest == null) {
            throw new ApiException("Missing the required parameter 'createBudgetRequest' when calling create(Async)");
        }

        return createCall(idempotencyKey, createBudgetRequest, _callback);

    }


    private ApiResponse<Budget> createWithHttpInfo(String idempotencyKey, CreateBudgetRequest createBudgetRequest) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(idempotencyKey, createBudgetRequest, null);
        Type localVarReturnType = new TypeToken<Budget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(String idempotencyKey, CreateBudgetRequest createBudgetRequest, final ApiCallback<Budget> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(idempotencyKey, createBudgetRequest, _callback);
        Type localVarReturnType = new TypeToken<Budget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private final String parentBudgetId;
        private final PeriodType periodType;
        private final Money limit;
        private final LimitType limitType;
        private final SpendType spendType;
        private final BudgetLimitVisibilityType limitVisibility;
        private final String idempotencyKey;
        private String description;
        private String name;
        private List<String> ownerUserIds;
        private List<String> memberUserIds;
        private LocalDate startDate;
        private LocalDate endDate;

        private CreateRequestBuilder(String parentBudgetId, PeriodType periodType, Money limit, LimitType limitType, SpendType spendType, BudgetLimitVisibilityType limitVisibility, String idempotencyKey) {
            this.parentBudgetId = parentBudgetId;
            this.periodType = periodType;
            this.limit = limit;
            this.limitType = limitType;
            this.spendType = spendType;
            this.limitVisibility = limitVisibility;
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Set description
         * @param description  Description of what the Budget is used for.  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name  Name for the Budget.  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set ownerUserIds
         * @param ownerUserIds  User IDs of the owners of the Budget.  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder ownerUserIds(List<String> ownerUserIds) {
            this.ownerUserIds = ownerUserIds;
            return this;
        }
        
        /**
         * Set memberUserIds
         * @param memberUserIds  User IDs of the members of the Budget.  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder memberUserIds(List<String> memberUserIds) {
            this.memberUserIds = memberUserIds;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  The UTC date when the Budget should start counting.  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  The UTC date when the Budget should stop counting.  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createBudget 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateBudgetRequest createBudgetRequest = buildBodyParams();
            return createCall(idempotencyKey, createBudgetRequest, _callback);
        }

        private CreateBudgetRequest buildBodyParams() {
            CreateBudgetRequest createBudgetRequest = new CreateBudgetRequest();
            createBudgetRequest.description(this.description);
            createBudgetRequest.name(this.name);
            createBudgetRequest.parentBudgetId(this.parentBudgetId);
            createBudgetRequest.ownerUserIds(this.ownerUserIds);
            createBudgetRequest.memberUserIds(this.memberUserIds);
            createBudgetRequest.periodType(this.periodType);
            createBudgetRequest.limit(this.limit);
            createBudgetRequest.limitType(this.limitType);
            createBudgetRequest.spendType(this.spendType);
            createBudgetRequest.startDate(this.startDate);
            createBudgetRequest.endDate(this.endDate);
            createBudgetRequest.limitVisibility(this.limitVisibility);
            return createBudgetRequest;
        }

        /**
         * Execute create request
         * @return Budget
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createBudget 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public Budget execute() throws ApiException {
            CreateBudgetRequest createBudgetRequest = buildBodyParams();
            ApiResponse<Budget> localVarResp = createWithHttpInfo(idempotencyKey, createBudgetRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;Budget&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createBudget 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Budget> executeWithHttpInfo() throws ApiException {
            CreateBudgetRequest createBudgetRequest = buildBodyParams();
            return createWithHttpInfo(idempotencyKey, createBudgetRequest);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createBudget 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Budget> _callback) throws ApiException {
            CreateBudgetRequest createBudgetRequest = buildBodyParams();
            return createAsync(idempotencyKey, createBudgetRequest, _callback);
        }
    }

    /**
     *  Create Budget 
     *  Creates a Budget. This endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
     * @param idempotencyKey  (required)
     * @param createBudgetRequest  (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createBudget 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create(String parentBudgetId, PeriodType periodType, Money limit, LimitType limitType, SpendType spendType, BudgetLimitVisibilityType limitVisibility, String idempotencyKey) throws IllegalArgumentException {
        if (parentBudgetId == null) throw new IllegalArgumentException("\"parentBudgetId\" is required but got null");
            

        if (periodType == null) throw new IllegalArgumentException("\"periodType\" is required but got null");
        if (limit == null) throw new IllegalArgumentException("\"limit\" is required but got null");
        if (limitType == null) throw new IllegalArgumentException("\"limitType\" is required but got null");
        if (spendType == null) throw new IllegalArgumentException("\"spendType\" is required but got null");
        if (limitVisibility == null) throw new IllegalArgumentException("\"limitVisibility\" is required but got null");
        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new CreateRequestBuilder(parentBudgetId, periodType, limit, limitType, spendType, limitVisibility, idempotencyKey);
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/budgets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<Budget> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Budget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<Budget> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Budget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getBudgetById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return Budget
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getBudgetById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Budget execute() throws ApiException {
            ApiResponse<Budget> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Budget&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getBudgetById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Budget> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getBudgetById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Budget> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     *  Get Budget 
     *  Retrieves a Budget by ID 
     * @param id  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getBudgetById 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call listCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/budgets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return listCall(cursor, limit, _callback);

    }


    private ApiResponse<PageBudget> listWithHttpInfo(String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(cursor, limit, null);
        Type localVarReturnType = new TypeToken<PageBudget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String cursor, Integer limit, final ApiCallback<PageBudget> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<PageBudget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String cursor;
        private Integer limit;

        private ListRequestBuilder() {
        }

        /**
         * Set cursor
         * @param cursor  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listBudgets 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(cursor, limit, _callback);
        }


        /**
         * Execute list request
         * @return PageBudget
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listBudgets 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public PageBudget execute() throws ApiException {
            ApiResponse<PageBudget> localVarResp = listWithHttpInfo(cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;PageBudget&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listBudgets 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBudget> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(cursor, limit);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listBudgets 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBudget> _callback) throws ApiException {
            return listAsync(cursor, limit, _callback);
        }
    }

    /**
     *  List Budgets 
     *  Lists Budgets belonging to this account 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listBudgets 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call updateBudgetCall(String id, String idempotencyKey, UpdateBudgetRequest updateBudgetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateBudgetRequest;

        // create path and map variables
        String localVarPath = "/v1/budgets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBudgetValidateBeforeCall(String id, String idempotencyKey, UpdateBudgetRequest updateBudgetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateBudget(Async)");
        }

        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling updateBudget(Async)");
        }

        // verify the required parameter 'updateBudgetRequest' is set
        if (updateBudgetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateBudgetRequest' when calling updateBudget(Async)");
        }

        return updateBudgetCall(id, idempotencyKey, updateBudgetRequest, _callback);

    }


    private ApiResponse<Budget> updateBudgetWithHttpInfo(String id, String idempotencyKey, UpdateBudgetRequest updateBudgetRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBudgetValidateBeforeCall(id, idempotencyKey, updateBudgetRequest, null);
        Type localVarReturnType = new TypeToken<Budget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBudgetAsync(String id, String idempotencyKey, UpdateBudgetRequest updateBudgetRequest, final ApiCallback<Budget> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBudgetValidateBeforeCall(id, idempotencyKey, updateBudgetRequest, _callback);
        Type localVarReturnType = new TypeToken<Budget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBudgetRequestBuilder {
        private final String id;
        private final String idempotencyKey;
        private String description;
        private String name;
        private List<String> ownerUserIds;
        private List<String> memberUserIds;
        private BudgetLimit limit;
        private LimitType limitType;
        private SpendType spendType;
        private LocalDate startDate;
        private LocalDate endDate;
        private BudgetLimitVisibilityType limitVisibility;

        private UpdateBudgetRequestBuilder(String id, String idempotencyKey) {
            this.id = id;
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Set description
         * @param description  Description of what the Budget is used for.  (optional)
         * @return UpdateBudgetRequestBuilder
         */
        public UpdateBudgetRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name  Name for the Budget.  (optional)
         * @return UpdateBudgetRequestBuilder
         */
        public UpdateBudgetRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set ownerUserIds
         * @param ownerUserIds  User IDs of the owners of the Budget.  (optional)
         * @return UpdateBudgetRequestBuilder
         */
        public UpdateBudgetRequestBuilder ownerUserIds(List<String> ownerUserIds) {
            this.ownerUserIds = ownerUserIds;
            return this;
        }
        
        /**
         * Set memberUserIds
         * @param memberUserIds  User IDs of the members of the Budget.  (optional)
         * @return UpdateBudgetRequestBuilder
         */
        public UpdateBudgetRequestBuilder memberUserIds(List<String> memberUserIds) {
            this.memberUserIds = memberUserIds;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return UpdateBudgetRequestBuilder
         */
        public UpdateBudgetRequestBuilder limit(BudgetLimit limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set limitType
         * @param limitType  (optional)
         * @return UpdateBudgetRequestBuilder
         */
        public UpdateBudgetRequestBuilder limitType(LimitType limitType) {
            this.limitType = limitType;
            return this;
        }
        
        /**
         * Set spendType
         * @param spendType  (optional)
         * @return UpdateBudgetRequestBuilder
         */
        public UpdateBudgetRequestBuilder spendType(SpendType spendType) {
            this.spendType = spendType;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  The UTC date when the Budget should start counting.  (optional)
         * @return UpdateBudgetRequestBuilder
         */
        public UpdateBudgetRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  The UTC date when the Budget should stop counting.  (optional)
         * @return UpdateBudgetRequestBuilder
         */
        public UpdateBudgetRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set limitVisibility
         * @param limitVisibility  (optional)
         * @return UpdateBudgetRequestBuilder
         */
        public UpdateBudgetRequestBuilder limitVisibility(BudgetLimitVisibilityType limitVisibility) {
            this.limitVisibility = limitVisibility;
            return this;
        }
        
        /**
         * Build call for updateBudget
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateBudget 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateBudgetRequest updateBudgetRequest = buildBodyParams();
            return updateBudgetCall(id, idempotencyKey, updateBudgetRequest, _callback);
        }

        private UpdateBudgetRequest buildBodyParams() {
            UpdateBudgetRequest updateBudgetRequest = new UpdateBudgetRequest();
            updateBudgetRequest.description(this.description);
            updateBudgetRequest.name(this.name);
            updateBudgetRequest.ownerUserIds(this.ownerUserIds);
            updateBudgetRequest.memberUserIds(this.memberUserIds);
            updateBudgetRequest.limit(this.limit);
            updateBudgetRequest.limitType(this.limitType);
            updateBudgetRequest.spendType(this.spendType);
            updateBudgetRequest.startDate(this.startDate);
            updateBudgetRequest.endDate(this.endDate);
            updateBudgetRequest.limitVisibility(this.limitVisibility);
            return updateBudgetRequest;
        }

        /**
         * Execute updateBudget request
         * @return Budget
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateBudget 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public Budget execute() throws ApiException {
            UpdateBudgetRequest updateBudgetRequest = buildBodyParams();
            ApiResponse<Budget> localVarResp = updateBudgetWithHttpInfo(id, idempotencyKey, updateBudgetRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateBudget request with HTTP info returned
         * @return ApiResponse&lt;Budget&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateBudget 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Budget> executeWithHttpInfo() throws ApiException {
            UpdateBudgetRequest updateBudgetRequest = buildBodyParams();
            return updateBudgetWithHttpInfo(id, idempotencyKey, updateBudgetRequest);
        }

        /**
         * Execute updateBudget request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateBudget 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Budget> _callback) throws ApiException {
            UpdateBudgetRequest updateBudgetRequest = buildBodyParams();
            return updateBudgetAsync(id, idempotencyKey, updateBudgetRequest, _callback);
        }
    }

    /**
     *  Update Budget 
     *  Updates a Budget. This endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
     * @param id  (required)
     * @param idempotencyKey  (required)
     * @param updateBudgetRequest  (required)
     * @return UpdateBudgetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateBudget 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBudgetRequestBuilder updateBudget(String id, String idempotencyKey) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new UpdateBudgetRequestBuilder(id, idempotencyKey);
    }
}

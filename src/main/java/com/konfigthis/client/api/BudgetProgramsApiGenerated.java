/*
 * Budgets API
 *  The budgets API lets you manage your Brex budgets. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BudgetProgram;
import com.konfigthis.client.model.CreateBudgetBlueprintRequest;
import com.konfigthis.client.model.CreateBudgetProgramRequest;
import com.konfigthis.client.model.CreateBudgetProgramRequestEmployeeFilter;
import com.konfigthis.client.model.PageBudgetProgram;
import com.konfigthis.client.model.UpdateBudgetBlueprintRequest;
import com.konfigthis.client.model.UpdateBudgetProgramRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BudgetProgramsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BudgetProgramsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BudgetProgramsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCall(String idempotencyKey, CreateBudgetProgramRequest createBudgetProgramRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBudgetProgramRequest;

        // create path and map variables
        String localVarPath = "/v1/budget_programs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(String idempotencyKey, CreateBudgetProgramRequest createBudgetProgramRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling create(Async)");
        }

        // verify the required parameter 'createBudgetProgramRequest' is set
        if (createBudgetProgramRequest == null) {
            throw new ApiException("Missing the required parameter 'createBudgetProgramRequest' when calling create(Async)");
        }

        return createCall(idempotencyKey, createBudgetProgramRequest, _callback);

    }


    private ApiResponse<BudgetProgram> createWithHttpInfo(String idempotencyKey, CreateBudgetProgramRequest createBudgetProgramRequest) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(idempotencyKey, createBudgetProgramRequest, null);
        Type localVarReturnType = new TypeToken<BudgetProgram>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(String idempotencyKey, CreateBudgetProgramRequest createBudgetProgramRequest, final ApiCallback<BudgetProgram> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(idempotencyKey, createBudgetProgramRequest, _callback);
        Type localVarReturnType = new TypeToken<BudgetProgram>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private final List<CreateBudgetBlueprintRequest> budgetBlueprints;
        private final String name;
        private final String idempotencyKey;
        private String description;
        private List<String> existingBudgetIds;
        private CreateBudgetProgramRequestEmployeeFilter employeeFilter;

        private CreateRequestBuilder(List<CreateBudgetBlueprintRequest> budgetBlueprints, String name, String idempotencyKey) {
            this.budgetBlueprints = budgetBlueprints;
            this.name = name;
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set existingBudgetIds
         * @param existingBudgetIds  IDs for existing budgets associated with this Budget Program.  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder existingBudgetIds(List<String> existingBudgetIds) {
            this.existingBudgetIds = existingBudgetIds;
            return this;
        }
        
        /**
         * Set employeeFilter
         * @param employeeFilter  (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder employeeFilter(CreateBudgetProgramRequestEmployeeFilter employeeFilter) {
            this.employeeFilter = employeeFilter;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createBudgetProgram 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateBudgetProgramRequest createBudgetProgramRequest = buildBodyParams();
            return createCall(idempotencyKey, createBudgetProgramRequest, _callback);
        }

        private CreateBudgetProgramRequest buildBodyParams() {
            CreateBudgetProgramRequest createBudgetProgramRequest = new CreateBudgetProgramRequest();
            createBudgetProgramRequest.description(this.description);
            createBudgetProgramRequest.existingBudgetIds(this.existingBudgetIds);
            createBudgetProgramRequest.budgetBlueprints(this.budgetBlueprints);
            createBudgetProgramRequest.employeeFilter(this.employeeFilter);
            createBudgetProgramRequest.name(this.name);
            return createBudgetProgramRequest;
        }

        /**
         * Execute create request
         * @return BudgetProgram
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createBudgetProgram 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public BudgetProgram execute() throws ApiException {
            CreateBudgetProgramRequest createBudgetProgramRequest = buildBodyParams();
            ApiResponse<BudgetProgram> localVarResp = createWithHttpInfo(idempotencyKey, createBudgetProgramRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;BudgetProgram&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createBudgetProgram 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BudgetProgram> executeWithHttpInfo() throws ApiException {
            CreateBudgetProgramRequest createBudgetProgramRequest = buildBodyParams();
            return createWithHttpInfo(idempotencyKey, createBudgetProgramRequest);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createBudgetProgram 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BudgetProgram> _callback) throws ApiException {
            CreateBudgetProgramRequest createBudgetProgramRequest = buildBodyParams();
            return createAsync(idempotencyKey, createBudgetProgramRequest, _callback);
        }
    }

    /**
     *  Create Budget Program 
     *  Creates a Budget Program. If your account does not have access to budget program features, a 403 response status will be returned. If this is the case and you want to gain access to this endpoint, please contact Brex support. 
     * @param idempotencyKey  (required)
     * @param createBudgetProgramRequest  (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createBudgetProgram 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create(List<CreateBudgetBlueprintRequest> budgetBlueprints, String name, String idempotencyKey) throws IllegalArgumentException {
        if (budgetBlueprints == null) throw new IllegalArgumentException("\"budgetBlueprints\" is required but got null");
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new CreateRequestBuilder(budgetBlueprints, name, idempotencyKey);
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/budget_programs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<BudgetProgram> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BudgetProgram>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<BudgetProgram> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BudgetProgram>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getBudgetProgramById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return BudgetProgram
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getBudgetProgramById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public BudgetProgram execute() throws ApiException {
            ApiResponse<BudgetProgram> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;BudgetProgram&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getBudgetProgramById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BudgetProgram> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getBudgetProgramById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BudgetProgram> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     *  Get Budget Program 
     *  Retrieves a Budget Program by ID 
     * @param id  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getBudgetProgramById 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call listCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/budget_programs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return listCall(cursor, limit, _callback);

    }


    private ApiResponse<PageBudgetProgram> listWithHttpInfo(String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(cursor, limit, null);
        Type localVarReturnType = new TypeToken<PageBudgetProgram>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String cursor, Integer limit, final ApiCallback<PageBudgetProgram> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<PageBudgetProgram>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String cursor;
        private Integer limit;

        private ListRequestBuilder() {
        }

        /**
         * Set cursor
         * @param cursor  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listBudgetPrograms 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(cursor, limit, _callback);
        }


        /**
         * Execute list request
         * @return PageBudgetProgram
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listBudgetPrograms 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public PageBudgetProgram execute() throws ApiException {
            ApiResponse<PageBudgetProgram> localVarResp = listWithHttpInfo(cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;PageBudgetProgram&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listBudgetPrograms 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageBudgetProgram> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(cursor, limit);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listBudgetPrograms 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageBudgetProgram> _callback) throws ApiException {
            return listAsync(cursor, limit, _callback);
        }
    }

    /**
     *  List Budget Programs 
     *  Lists Budget Programs belonging to this account 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listBudgetPrograms 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call removeProgramByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/budget_programs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeProgramByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeProgramById(Async)");
        }

        return removeProgramByIdCall(id, _callback);

    }


    private ApiResponse<BudgetProgram> removeProgramByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = removeProgramByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BudgetProgram>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeProgramByIdAsync(String id, final ApiCallback<BudgetProgram> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeProgramByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BudgetProgram>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveProgramByIdRequestBuilder {
        private final String id;

        private RemoveProgramByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for removeProgramById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> deleteBudgetProgram 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeProgramByIdCall(id, _callback);
        }


        /**
         * Execute removeProgramById request
         * @return BudgetProgram
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> deleteBudgetProgram 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public BudgetProgram execute() throws ApiException {
            ApiResponse<BudgetProgram> localVarResp = removeProgramByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeProgramById request with HTTP info returned
         * @return ApiResponse&lt;BudgetProgram&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> deleteBudgetProgram 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BudgetProgram> executeWithHttpInfo() throws ApiException {
            return removeProgramByIdWithHttpInfo(id);
        }

        /**
         * Execute removeProgramById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> deleteBudgetProgram 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BudgetProgram> _callback) throws ApiException {
            return removeProgramByIdAsync(id, _callback);
        }
    }

    /**
     *  Delete Budget Program 
     *  Delete a Budget Program by ID. This endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
     * @param id  (required)
     * @return RemoveProgramByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteBudgetProgram 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveProgramByIdRequestBuilder removeProgramById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveProgramByIdRequestBuilder(id);
    }
    private okhttp3.Call updateProgramByIdCall(String id, String idempotencyKey, UpdateBudgetProgramRequest updateBudgetProgramRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateBudgetProgramRequest;

        // create path and map variables
        String localVarPath = "/v1/budget_programs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProgramByIdValidateBeforeCall(String id, String idempotencyKey, UpdateBudgetProgramRequest updateBudgetProgramRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateProgramById(Async)");
        }

        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling updateProgramById(Async)");
        }

        // verify the required parameter 'updateBudgetProgramRequest' is set
        if (updateBudgetProgramRequest == null) {
            throw new ApiException("Missing the required parameter 'updateBudgetProgramRequest' when calling updateProgramById(Async)");
        }

        return updateProgramByIdCall(id, idempotencyKey, updateBudgetProgramRequest, _callback);

    }


    private ApiResponse<BudgetProgram> updateProgramByIdWithHttpInfo(String id, String idempotencyKey, UpdateBudgetProgramRequest updateBudgetProgramRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProgramByIdValidateBeforeCall(id, idempotencyKey, updateBudgetProgramRequest, null);
        Type localVarReturnType = new TypeToken<BudgetProgram>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProgramByIdAsync(String id, String idempotencyKey, UpdateBudgetProgramRequest updateBudgetProgramRequest, final ApiCallback<BudgetProgram> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProgramByIdValidateBeforeCall(id, idempotencyKey, updateBudgetProgramRequest, _callback);
        Type localVarReturnType = new TypeToken<BudgetProgram>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProgramByIdRequestBuilder {
        private final String id;
        private final String idempotencyKey;
        private String description;
        private List<String> existingBudgetIds;
        private List<UpdateBudgetBlueprintRequest> budgetBlueprints;
        private CreateBudgetProgramRequestEmployeeFilter employeeFilter;
        private String name;

        private UpdateProgramByIdRequestBuilder(String id, String idempotencyKey) {
            this.id = id;
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateProgramByIdRequestBuilder
         */
        public UpdateProgramByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set existingBudgetIds
         * @param existingBudgetIds  IDs for existing budgets associated with this Budget Program.  (optional)
         * @return UpdateProgramByIdRequestBuilder
         */
        public UpdateProgramByIdRequestBuilder existingBudgetIds(List<String> existingBudgetIds) {
            this.existingBudgetIds = existingBudgetIds;
            return this;
        }
        
        /**
         * Set budgetBlueprints
         * @param budgetBlueprints  The Blueprints to update the budget program with. Blueprints without an ID are treated as new blueprints to be created. Blueprints that exist currently on the Budget Program, but are missing from the input, will be deleted.  (optional)
         * @return UpdateProgramByIdRequestBuilder
         */
        public UpdateProgramByIdRequestBuilder budgetBlueprints(List<UpdateBudgetBlueprintRequest> budgetBlueprints) {
            this.budgetBlueprints = budgetBlueprints;
            return this;
        }
        
        /**
         * Set employeeFilter
         * @param employeeFilter  (optional)
         * @return UpdateProgramByIdRequestBuilder
         */
        public UpdateProgramByIdRequestBuilder employeeFilter(CreateBudgetProgramRequestEmployeeFilter employeeFilter) {
            this.employeeFilter = employeeFilter;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateProgramByIdRequestBuilder
         */
        public UpdateProgramByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateProgramById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateBudgetProgram 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateBudgetProgramRequest updateBudgetProgramRequest = buildBodyParams();
            return updateProgramByIdCall(id, idempotencyKey, updateBudgetProgramRequest, _callback);
        }

        private UpdateBudgetProgramRequest buildBodyParams() {
            UpdateBudgetProgramRequest updateBudgetProgramRequest = new UpdateBudgetProgramRequest();
            updateBudgetProgramRequest.description(this.description);
            updateBudgetProgramRequest.existingBudgetIds(this.existingBudgetIds);
            updateBudgetProgramRequest.budgetBlueprints(this.budgetBlueprints);
            updateBudgetProgramRequest.employeeFilter(this.employeeFilter);
            updateBudgetProgramRequest.name(this.name);
            return updateBudgetProgramRequest;
        }

        /**
         * Execute updateProgramById request
         * @return BudgetProgram
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateBudgetProgram 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public BudgetProgram execute() throws ApiException {
            UpdateBudgetProgramRequest updateBudgetProgramRequest = buildBodyParams();
            ApiResponse<BudgetProgram> localVarResp = updateProgramByIdWithHttpInfo(id, idempotencyKey, updateBudgetProgramRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProgramById request with HTTP info returned
         * @return ApiResponse&lt;BudgetProgram&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateBudgetProgram 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BudgetProgram> executeWithHttpInfo() throws ApiException {
            UpdateBudgetProgramRequest updateBudgetProgramRequest = buildBodyParams();
            return updateProgramByIdWithHttpInfo(id, idempotencyKey, updateBudgetProgramRequest);
        }

        /**
         * Execute updateProgramById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateBudgetProgram 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BudgetProgram> _callback) throws ApiException {
            UpdateBudgetProgramRequest updateBudgetProgramRequest = buildBodyParams();
            return updateProgramByIdAsync(id, idempotencyKey, updateBudgetProgramRequest, _callback);
        }
    }

    /**
     *  Update Budget Program 
     *  Updates a Budget Program. This endpoint requires budget management. If your account does not have access to budget management features, a 403 response status will be returned.  If this is the case and you want to gain access to this endpoint, please contact Brex support. 
     * @param id  (required)
     * @param idempotencyKey  (required)
     * @param updateBudgetProgramRequest  (required)
     * @return UpdateProgramByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateBudgetProgram 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProgramByIdRequestBuilder updateProgramById(String id, String idempotencyKey) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new UpdateProgramByIdRequestBuilder(id, idempotencyKey);
    }
}

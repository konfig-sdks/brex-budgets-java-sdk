/*
 * Budgets API
 *  The budgets API lets you manage your Brex budgets. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BudgetBlueprint;
import com.konfigthis.client.model.BudgetProgramStatus;
import com.konfigthis.client.model.EmployeeFilter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 *  Budget Program used to create budgets for eligible users. 
 */
@ApiModel(description = " Budget Program used to create budgets for eligible users. ")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BudgetProgram {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_BUDGET_BLUEPRINTS = "budget_blueprints";
  @SerializedName(SERIALIZED_NAME_BUDGET_BLUEPRINTS)
  private List<BudgetBlueprint> budgetBlueprints = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXISTING_BUDGET_IDS = "existing_budget_ids";
  @SerializedName(SERIALIZED_NAME_EXISTING_BUDGET_IDS)
  private List<String> existingBudgetIds = null;

  public static final String SERIALIZED_NAME_EMPLOYEE_FILTER = "employee_filter";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_FILTER)
  private EmployeeFilter employeeFilter;

  public static final String SERIALIZED_NAME_BUDGET_PROGRAM_STATUS = "budget_program_status";
  @SerializedName(SERIALIZED_NAME_BUDGET_PROGRAM_STATUS)
  private BudgetProgramStatus budgetProgramStatus;

  public static final String SERIALIZED_NAME_CREATOR_USER_ID = "creator_user_id";
  @SerializedName(SERIALIZED_NAME_CREATOR_USER_ID)
  private String creatorUserId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private LocalDate createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private LocalDate updatedAt;

  public BudgetProgram() {
  }

  public BudgetProgram description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public BudgetProgram id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public BudgetProgram name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public BudgetProgram budgetBlueprints(List<BudgetBlueprint> budgetBlueprints) {
    
    
    
    
    this.budgetBlueprints = budgetBlueprints;
    return this;
  }

  public BudgetProgram addBudgetBlueprintsItem(BudgetBlueprint budgetBlueprintsItem) {
    this.budgetBlueprints.add(budgetBlueprintsItem);
    return this;
  }

   /**
   * Get budgetBlueprints
   * @return budgetBlueprints
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<BudgetBlueprint> getBudgetBlueprints() {
    return budgetBlueprints;
  }


  public void setBudgetBlueprints(List<BudgetBlueprint> budgetBlueprints) {
    
    
    
    this.budgetBlueprints = budgetBlueprints;
  }


  public BudgetProgram existingBudgetIds(List<String> existingBudgetIds) {
    
    
    
    
    this.existingBudgetIds = existingBudgetIds;
    return this;
  }

  public BudgetProgram addExistingBudgetIdsItem(String existingBudgetIdsItem) {
    if (this.existingBudgetIds == null) {
      this.existingBudgetIds = new ArrayList<>();
    }
    this.existingBudgetIds.add(existingBudgetIdsItem);
    return this;
  }

   /**
   *  IDs for existing budgets associated with this Budget Program. 
   * @return existingBudgetIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " IDs for existing budgets associated with this Budget Program. ")

  public List<String> getExistingBudgetIds() {
    return existingBudgetIds;
  }


  public void setExistingBudgetIds(List<String> existingBudgetIds) {
    
    
    
    this.existingBudgetIds = existingBudgetIds;
  }


  public BudgetProgram employeeFilter(EmployeeFilter employeeFilter) {
    
    
    
    
    this.employeeFilter = employeeFilter;
    return this;
  }

   /**
   * Get employeeFilter
   * @return employeeFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeFilter getEmployeeFilter() {
    return employeeFilter;
  }


  public void setEmployeeFilter(EmployeeFilter employeeFilter) {
    
    
    
    this.employeeFilter = employeeFilter;
  }


  public BudgetProgram budgetProgramStatus(BudgetProgramStatus budgetProgramStatus) {
    
    
    
    
    this.budgetProgramStatus = budgetProgramStatus;
    return this;
  }

   /**
   * Get budgetProgramStatus
   * @return budgetProgramStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BudgetProgramStatus getBudgetProgramStatus() {
    return budgetProgramStatus;
  }


  public void setBudgetProgramStatus(BudgetProgramStatus budgetProgramStatus) {
    
    
    
    this.budgetProgramStatus = budgetProgramStatus;
  }


  public BudgetProgram creatorUserId(String creatorUserId) {
    
    
    
    
    this.creatorUserId = creatorUserId;
    return this;
  }

   /**
   * Get creatorUserId
   * @return creatorUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCreatorUserId() {
    return creatorUserId;
  }


  public void setCreatorUserId(String creatorUserId) {
    
    
    
    this.creatorUserId = creatorUserId;
  }


  public BudgetProgram createdAt(LocalDate createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public LocalDate getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(LocalDate createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public BudgetProgram updatedAt(LocalDate updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public LocalDate getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(LocalDate updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BudgetProgram instance itself
   */
  public BudgetProgram putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BudgetProgram budgetProgram = (BudgetProgram) o;
    return Objects.equals(this.description, budgetProgram.description) &&
        Objects.equals(this.id, budgetProgram.id) &&
        Objects.equals(this.name, budgetProgram.name) &&
        Objects.equals(this.budgetBlueprints, budgetProgram.budgetBlueprints) &&
        Objects.equals(this.existingBudgetIds, budgetProgram.existingBudgetIds) &&
        Objects.equals(this.employeeFilter, budgetProgram.employeeFilter) &&
        Objects.equals(this.budgetProgramStatus, budgetProgram.budgetProgramStatus) &&
        Objects.equals(this.creatorUserId, budgetProgram.creatorUserId) &&
        Objects.equals(this.createdAt, budgetProgram.createdAt) &&
        Objects.equals(this.updatedAt, budgetProgram.updatedAt)&&
        Objects.equals(this.additionalProperties, budgetProgram.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, name, budgetBlueprints, existingBudgetIds, employeeFilter, budgetProgramStatus, creatorUserId, createdAt, updatedAt, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BudgetProgram {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    budgetBlueprints: ").append(toIndentedString(budgetBlueprints)).append("\n");
    sb.append("    existingBudgetIds: ").append(toIndentedString(existingBudgetIds)).append("\n");
    sb.append("    employeeFilter: ").append(toIndentedString(employeeFilter)).append("\n");
    sb.append("    budgetProgramStatus: ").append(toIndentedString(budgetProgramStatus)).append("\n");
    sb.append("    creatorUserId: ").append(toIndentedString(creatorUserId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("budget_blueprints");
    openapiFields.add("existing_budget_ids");
    openapiFields.add("employee_filter");
    openapiFields.add("budget_program_status");
    openapiFields.add("creator_user_id");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("budget_blueprints");
    openapiRequiredFields.add("budget_program_status");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("updated_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BudgetProgram
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BudgetProgram.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BudgetProgram is not found in the empty JSON string", BudgetProgram.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BudgetProgram.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonNull() && (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("budget_blueprints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `budget_blueprints` to be an array in the JSON string but got `%s`", jsonObj.get("budget_blueprints").toString()));
      }

      JsonArray jsonArraybudgetBlueprints = jsonObj.getAsJsonArray("budget_blueprints");
      // validate the required field `budget_blueprints` (array)
      for (int i = 0; i < jsonArraybudgetBlueprints.size(); i++) {
        BudgetBlueprint.validateJsonObject(jsonArraybudgetBlueprints.get(i).getAsJsonObject());
      };
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("existing_budget_ids") != null && !jsonObj.get("existing_budget_ids").isJsonNull() && !jsonObj.get("existing_budget_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `existing_budget_ids` to be an array in the JSON string or null but got `%s`", jsonObj.get("existing_budget_ids").toString()));
      }
      // validate the optional field `employee_filter`
      if (jsonObj.get("employee_filter") != null && !jsonObj.get("employee_filter").isJsonNull()) {
        EmployeeFilter.validateJsonObject(jsonObj.getAsJsonObject("employee_filter"));
      }
      if (!jsonObj.get("creator_user_id").isJsonNull() && (jsonObj.get("creator_user_id") != null && !jsonObj.get("creator_user_id").isJsonNull()) && !jsonObj.get("creator_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator_user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BudgetProgram.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BudgetProgram' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BudgetProgram> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BudgetProgram.class));

       return (TypeAdapter<T>) new TypeAdapter<BudgetProgram>() {
           @Override
           public void write(JsonWriter out, BudgetProgram value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BudgetProgram read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BudgetProgram instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BudgetProgram given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BudgetProgram
  * @throws IOException if the JSON string is invalid with respect to BudgetProgram
  */
  public static BudgetProgram fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BudgetProgram.class);
  }

 /**
  * Convert an instance of BudgetProgram to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


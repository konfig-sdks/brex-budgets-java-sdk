/*
 * Budgets API
 *  The budgets API lets you manage your Brex budgets. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BudgetCurrentPeriodBalance;
import com.konfigthis.client.model.BudgetLimit;
import com.konfigthis.client.model.BudgetStatus;
import com.konfigthis.client.model.LimitType;
import com.konfigthis.client.model.PeriodType;
import com.konfigthis.client.model.SpendType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Budget
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Budget {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_BUDGET_ID = "budget_id";
  @SerializedName(SERIALIZED_NAME_BUDGET_ID)
  private String budgetId;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CREATOR_USER_ID = "creator_user_id";
  @SerializedName(SERIALIZED_NAME_CREATOR_USER_ID)
  private String creatorUserId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_BUDGET_ID = "parent_budget_id";
  @SerializedName(SERIALIZED_NAME_PARENT_BUDGET_ID)
  private String parentBudgetId;

  public static final String SERIALIZED_NAME_OWNER_USER_IDS = "owner_user_ids";
  @SerializedName(SERIALIZED_NAME_OWNER_USER_IDS)
  private List<String> ownerUserIds = null;

  public static final String SERIALIZED_NAME_MEMBER_USER_IDS = "member_user_ids";
  @SerializedName(SERIALIZED_NAME_MEMBER_USER_IDS)
  private List<String> memberUserIds = null;

  public static final String SERIALIZED_NAME_PERIOD_TYPE = "period_type";
  @SerializedName(SERIALIZED_NAME_PERIOD_TYPE)
  private PeriodType periodType;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private BudgetLimit limit;

  public static final String SERIALIZED_NAME_BUDGET_STATUS = "budget_status";
  @SerializedName(SERIALIZED_NAME_BUDGET_STATUS)
  private BudgetStatus budgetStatus;

  public static final String SERIALIZED_NAME_LIMIT_TYPE = "limit_type";
  @SerializedName(SERIALIZED_NAME_LIMIT_TYPE)
  private LimitType limitType;

  public static final String SERIALIZED_NAME_SPEND_TYPE = "spend_type";
  @SerializedName(SERIALIZED_NAME_SPEND_TYPE)
  private SpendType spendType;

  public static final String SERIALIZED_NAME_CURRENT_PERIOD_BALANCE = "current_period_balance";
  @SerializedName(SERIALIZED_NAME_CURRENT_PERIOD_BALANCE)
  private BudgetCurrentPeriodBalance currentPeriodBalance;

  public Budget() {
  }

  public Budget description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   *  Description of what the Budget is used for. 
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " Description of what the Budget is used for. ")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Budget budgetId(String budgetId) {
    
    
    
    
    this.budgetId = budgetId;
    return this;
  }

   /**
   *  Unique ID for the Budget. 
   * @return budgetId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " Unique ID for the Budget. ")

  public String getBudgetId() {
    return budgetId;
  }


  public void setBudgetId(String budgetId) {
    
    
    
    this.budgetId = budgetId;
  }


  public Budget accountId(String accountId) {
    
    
    
    
    this.accountId = accountId;
    return this;
  }

   /**
   *  The Brex account this Budget belongs to. 
   * @return accountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " The Brex account this Budget belongs to. ")

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    
    
    
    this.accountId = accountId;
  }


  public Budget creatorUserId(String creatorUserId) {
    
    
    
    
    this.creatorUserId = creatorUserId;
    return this;
  }

   /**
   *  The ID of the user who originally created this budget. 
   * @return creatorUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " The ID of the user who originally created this budget. ")

  public String getCreatorUserId() {
    return creatorUserId;
  }


  public void setCreatorUserId(String creatorUserId) {
    
    
    
    this.creatorUserId = creatorUserId;
  }


  public Budget name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   *  Name for the Budget. 
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " Name for the Budget. ")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Budget parentBudgetId(String parentBudgetId) {
    
    
    
    
    this.parentBudgetId = parentBudgetId;
    return this;
  }

   /**
   *  ID of parent Budget. 
   * @return parentBudgetId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " ID of parent Budget. ")

  public String getParentBudgetId() {
    return parentBudgetId;
  }


  public void setParentBudgetId(String parentBudgetId) {
    
    
    
    this.parentBudgetId = parentBudgetId;
  }


  public Budget ownerUserIds(List<String> ownerUserIds) {
    
    
    
    
    this.ownerUserIds = ownerUserIds;
    return this;
  }

  public Budget addOwnerUserIdsItem(String ownerUserIdsItem) {
    if (this.ownerUserIds == null) {
      this.ownerUserIds = new ArrayList<>();
    }
    this.ownerUserIds.add(ownerUserIdsItem);
    return this;
  }

   /**
   *  User IDs of the owners of the Budget. 
   * @return ownerUserIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " User IDs of the owners of the Budget. ")

  public List<String> getOwnerUserIds() {
    return ownerUserIds;
  }


  public void setOwnerUserIds(List<String> ownerUserIds) {
    
    
    
    this.ownerUserIds = ownerUserIds;
  }


  public Budget memberUserIds(List<String> memberUserIds) {
    
    
    
    
    this.memberUserIds = memberUserIds;
    return this;
  }

  public Budget addMemberUserIdsItem(String memberUserIdsItem) {
    if (this.memberUserIds == null) {
      this.memberUserIds = new ArrayList<>();
    }
    this.memberUserIds.add(memberUserIdsItem);
    return this;
  }

   /**
   *  User IDs of the members of the Budget. 
   * @return memberUserIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " User IDs of the members of the Budget. ")

  public List<String> getMemberUserIds() {
    return memberUserIds;
  }


  public void setMemberUserIds(List<String> memberUserIds) {
    
    
    
    this.memberUserIds = memberUserIds;
  }


  public Budget periodType(PeriodType periodType) {
    
    
    
    
    this.periodType = periodType;
    return this;
  }

   /**
   * Get periodType
   * @return periodType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PeriodType getPeriodType() {
    return periodType;
  }


  public void setPeriodType(PeriodType periodType) {
    
    
    
    this.periodType = periodType;
  }


  public Budget startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   *  The UTC date when the Budget should start counting. 
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " The UTC date when the Budget should start counting. ")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public Budget endDate(LocalDate endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   *  The UTC date when the Budget should stop counting. 
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " The UTC date when the Budget should stop counting. ")

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    
    
    
    this.endDate = endDate;
  }


  public Budget limit(BudgetLimit limit) {
    
    
    
    
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BudgetLimit getLimit() {
    return limit;
  }


  public void setLimit(BudgetLimit limit) {
    
    
    
    this.limit = limit;
  }


  public Budget budgetStatus(BudgetStatus budgetStatus) {
    
    
    
    
    this.budgetStatus = budgetStatus;
    return this;
  }

   /**
   * Get budgetStatus
   * @return budgetStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BudgetStatus getBudgetStatus() {
    return budgetStatus;
  }


  public void setBudgetStatus(BudgetStatus budgetStatus) {
    
    
    
    this.budgetStatus = budgetStatus;
  }


  public Budget limitType(LimitType limitType) {
    
    
    
    
    this.limitType = limitType;
    return this;
  }

   /**
   * Get limitType
   * @return limitType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LimitType getLimitType() {
    return limitType;
  }


  public void setLimitType(LimitType limitType) {
    
    
    
    this.limitType = limitType;
  }


  public Budget spendType(SpendType spendType) {
    
    
    
    
    this.spendType = spendType;
    return this;
  }

   /**
   * Get spendType
   * @return spendType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SpendType getSpendType() {
    return spendType;
  }


  public void setSpendType(SpendType spendType) {
    
    
    
    this.spendType = spendType;
  }


  public Budget currentPeriodBalance(BudgetCurrentPeriodBalance currentPeriodBalance) {
    
    
    
    
    this.currentPeriodBalance = currentPeriodBalance;
    return this;
  }

   /**
   * Get currentPeriodBalance
   * @return currentPeriodBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BudgetCurrentPeriodBalance getCurrentPeriodBalance() {
    return currentPeriodBalance;
  }


  public void setCurrentPeriodBalance(BudgetCurrentPeriodBalance currentPeriodBalance) {
    
    
    
    this.currentPeriodBalance = currentPeriodBalance;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Budget instance itself
   */
  public Budget putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Budget budget = (Budget) o;
    return Objects.equals(this.description, budget.description) &&
        Objects.equals(this.budgetId, budget.budgetId) &&
        Objects.equals(this.accountId, budget.accountId) &&
        Objects.equals(this.creatorUserId, budget.creatorUserId) &&
        Objects.equals(this.name, budget.name) &&
        Objects.equals(this.parentBudgetId, budget.parentBudgetId) &&
        Objects.equals(this.ownerUserIds, budget.ownerUserIds) &&
        Objects.equals(this.memberUserIds, budget.memberUserIds) &&
        Objects.equals(this.periodType, budget.periodType) &&
        Objects.equals(this.startDate, budget.startDate) &&
        Objects.equals(this.endDate, budget.endDate) &&
        Objects.equals(this.limit, budget.limit) &&
        Objects.equals(this.budgetStatus, budget.budgetStatus) &&
        Objects.equals(this.limitType, budget.limitType) &&
        Objects.equals(this.spendType, budget.spendType) &&
        Objects.equals(this.currentPeriodBalance, budget.currentPeriodBalance)&&
        Objects.equals(this.additionalProperties, budget.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, budgetId, accountId, creatorUserId, name, parentBudgetId, ownerUserIds, memberUserIds, periodType, startDate, endDate, limit, budgetStatus, limitType, spendType, currentPeriodBalance, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Budget {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    budgetId: ").append(toIndentedString(budgetId)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    creatorUserId: ").append(toIndentedString(creatorUserId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentBudgetId: ").append(toIndentedString(parentBudgetId)).append("\n");
    sb.append("    ownerUserIds: ").append(toIndentedString(ownerUserIds)).append("\n");
    sb.append("    memberUserIds: ").append(toIndentedString(memberUserIds)).append("\n");
    sb.append("    periodType: ").append(toIndentedString(periodType)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    budgetStatus: ").append(toIndentedString(budgetStatus)).append("\n");
    sb.append("    limitType: ").append(toIndentedString(limitType)).append("\n");
    sb.append("    spendType: ").append(toIndentedString(spendType)).append("\n");
    sb.append("    currentPeriodBalance: ").append(toIndentedString(currentPeriodBalance)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("budget_id");
    openapiFields.add("account_id");
    openapiFields.add("creator_user_id");
    openapiFields.add("name");
    openapiFields.add("parent_budget_id");
    openapiFields.add("owner_user_ids");
    openapiFields.add("member_user_ids");
    openapiFields.add("period_type");
    openapiFields.add("start_date");
    openapiFields.add("end_date");
    openapiFields.add("limit");
    openapiFields.add("budget_status");
    openapiFields.add("limit_type");
    openapiFields.add("spend_type");
    openapiFields.add("current_period_balance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("period_type");
    openapiRequiredFields.add("budget_status");
    openapiRequiredFields.add("spend_type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Budget
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Budget.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Budget is not found in the empty JSON string", Budget.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Budget.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonNull() && (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("budget_id") != null && !jsonObj.get("budget_id").isJsonNull()) && !jsonObj.get("budget_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budget_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budget_id").toString()));
      }
      if ((jsonObj.get("account_id") != null && !jsonObj.get("account_id").isJsonNull()) && !jsonObj.get("account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_id").toString()));
      }
      if (!jsonObj.get("creator_user_id").isJsonNull() && (jsonObj.get("creator_user_id") != null && !jsonObj.get("creator_user_id").isJsonNull()) && !jsonObj.get("creator_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator_user_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("parent_budget_id").isJsonNull() && (jsonObj.get("parent_budget_id") != null && !jsonObj.get("parent_budget_id").isJsonNull()) && !jsonObj.get("parent_budget_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_budget_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_budget_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("owner_user_ids") != null && !jsonObj.get("owner_user_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner_user_ids` to be an array in the JSON string but got `%s`", jsonObj.get("owner_user_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("member_user_ids") != null && !jsonObj.get("member_user_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `member_user_ids` to be an array in the JSON string but got `%s`", jsonObj.get("member_user_ids").toString()));
      }
      // validate the optional field `limit`
      if (jsonObj.get("limit") != null && !jsonObj.get("limit").isJsonNull()) {
        BudgetLimit.validateJsonObject(jsonObj.getAsJsonObject("limit"));
      }
      // validate the optional field `limit_type`
      if (jsonObj.get("limit_type") != null && !jsonObj.get("limit_type").isJsonNull()) {
        LimitType.validateJsonObject(jsonObj.getAsJsonObject("limit_type"));
      }
      // validate the optional field `current_period_balance`
      if (jsonObj.get("current_period_balance") != null && !jsonObj.get("current_period_balance").isJsonNull()) {
        BudgetCurrentPeriodBalance.validateJsonObject(jsonObj.getAsJsonObject("current_period_balance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Budget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Budget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Budget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Budget.class));

       return (TypeAdapter<T>) new TypeAdapter<Budget>() {
           @Override
           public void write(JsonWriter out, Budget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Budget read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Budget instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Budget given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Budget
  * @throws IOException if the JSON string is invalid with respect to Budget
  */
  public static Budget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Budget.class);
  }

 /**
  * Convert an instance of Budget to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

